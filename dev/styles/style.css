@import '../styles/normalize.css';
@import '../styles/fonts.css';
/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
.header-class {
  height: auto;
}
.header-class p {
  font: 12px 'tahoma';
  color: #5a5;
  text-decoration: underline;
  height: 30px;
  background: #f00;
  -webkit-border-radius: 10px;
          border-radius: 10px;
}
a,
a:hover,
li,
img,
input,
textarea {
  -webkit-transition: all 0.5s ease-in-out;
  -o-transition: all 0.5s ease-in-out;
  transition: all 0.5s ease-in-out;
}
body {
  cursor: default;
}
a {
  cursor: pointer;
}
.icon-1 {
  display: inline-block;
  background-image: url(../img/sprite-30.png);
  background-position: 0px 0px;
  width: 13px;
  height: 13px;
}
.icon-2 {
  display: inline-block;
  background-image: url(../img/sprite-30.png);
  background-position: -15px 0px;
  width: 13px;
  height: 13px;
}
.icon-3 {
  display: inline-block;
  background-image: url(../img/sprite-30.png);
  background-position: 0px 0px;
  width: 13px;
  height: 13px;
}
